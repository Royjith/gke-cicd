steps:
# Step 1: Build Docker Image for 'app1'
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'us-central1-docker.pkg.dev/vpc-satyajith/docker-3/quickstart-image', './app1' ]
  id: 'Build quickstart-image'

# Step 2: Push Docker Image for 'app1'
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/vpc-satyajith/docker-3/quickstart-image' ]
  id: 'Push quickstart-image'

# Step 3: Build Docker Image for 'app2' (Flask application)
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'us-central1-docker.pkg.dev/vpc-satyajith/docker-3/flask-image', './app2' ]
  id: 'Build flask-image'

# Step 4: Push Docker Image for 'app2'
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/vpc-satyajith/docker-3/flask-image' ]
  id: 'Push flask-image'

# Step 5: Get GKE cluster credentials and deploy using Google Cloud Deploy
- name: 'google/cloud-sdk:latest'
  entrypoint: 'sh'
  args:
  - -xe # -x: print commands, -e: exit on error
  - -c # execute the following string as a command
  - |
    # Get GKE cluster credentials first
    gcloud container clusters get-credentials gke-cluster-01 --zone us-central1-a --project vpc-satyajith
    # Verify cluster connection
    kubectl cluster-info
    # Apply the Cloud Deploy pipeline and target definitions
    gcloud deploy apply --file clouddeploy.yaml --region=us-central1
    # Create a new release for the delivery pipeline
    # ${SHORT_SHA} is a built-in Cloud Build substitution variable for the commit SHA
    # Use timestamp to ensure unique release names
    RELEASE_NAME="app-release-${SHORT_SHA}-$(date +%s)"
    gcloud deploy releases create "${RELEASE_NAME}" \
        --delivery-pipeline=gke-cicd-pipeline \
        --region=us-central1 \
        --skaffold-file=skaffold.yaml
    echo "Created release: ${RELEASE_NAME}"
    # Export for use in subsequent steps
    echo "RELEASE_NAME=${RELEASE_NAME}" >> /workspace/env.sh

# Step 6: Run Web Security Scanner after deploy
- name: 'google/cloud-sdk:latest'
  entrypoint: 'bash'
  env:
    - 'PROJECT_ID=vpc-satyajith'
    - 'REGION=us-central1'
    - 'ZONE=us-central1-a'
    - 'CLUSTER=gke-cluster-01'
    - 'NAMESPACE=default'
    - 'SERVICES=my-service:8080,flask-service:8081'
    - 'SCAN_DISPLAY_NAME=gke-cicd-scan-${SHORT_SHA}-$(date +%s)'
    - 'SCAN_FAIL_ON_SEVERITY=MEDIUM'
    - 'WAIT_CLOUD_DEPLOY=true'
    - 'DELIVERY_PIPELINE=gke-cicd-pipeline'
    - 'DEPLOY_REGION=us-central1'
    - 'SERVICE_READY_TIMEOUT_SECS=1200'
  args:
    - -c
    - |
      # Get cluster credentials again for this step
      gcloud container clusters get-credentials gke-cluster-01 --zone us-central1-a --project vpc-satyajith
      # Source the environment file to get RELEASE_NAME
      if [[ -f /workspace/env.sh ]]; then
        source /workspace/env.sh
        echo "Using release: ${RELEASE_NAME:-<not set>}"
      fi
      chmod +x security/web_security_scanner.sh
      ./security/web_security_scanner.sh

options:
  # Configure logging to only send logs to Cloud Logging, not also to Cloud Storage #for logs
  logging: CLOUD_LOGGING_ONLY
